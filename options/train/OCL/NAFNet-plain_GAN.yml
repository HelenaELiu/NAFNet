# ------------------------------------------------------------------------
# Copyright (c) 2022 megvii-model. All Rights Reserved.
# ------------------------------------------------------------------------
# Modified from BasicSR (https://github.com/xinntao/BasicSR)
# Copyright 2018-2020 BasicSR Authors
# ------------------------------------------------------------------------
# general settings
name: NAFNet-OCL-plain-GAN
model_type: ImageRestorationModel
scale: 1
num_gpu: 7
manual_seed: 10

datasets:
  train:
    name: LF2016_OCL
    type: DataLoaderCenterViewsAndShiftToShift
    dataroot_path: /newDisk/dataset/2x2_OCL_BOKEH/stanford_LF2016
    test_list: test_files.json

    img_height: 370
    img_width: 540
    random: true
    crop: true
    ltm: false 
    gamma: 3.0
    size: 1000

    # dataloader
    use_shuffle: true
    num_worker_per_gpu: 6
    batch_size_per_gpu: 7
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: LF2016_OCL
    type: DataLoaderCenterViewsAndShiftToShift
    dataroot_path: /newDisk/dataset/2x2_OCL_BOKEH/stanford_LF2016
    test_list: test_files.json

    img_height: 370
    img_width: 540
    random: true
    crop: true
    ltm: false 
    gamma: 3.0
    size: 1000

network_g:
  in_channels: 15
  out_channels: 3
  type: NAFNetPlain
  width: 32
  enc_blk_nums: [2, 2, 4, 8]
  middle_blk_num: 12
  dec_blk_nums: [2, 2, 2, 2]

# path
path:
  pretrain_network_g: ~
  strict_load_g: true
  resume_state: ~

# training settings
train:
  optim_g:
    type: AdamW
    lr: !!float 1e-3
    weight_decay: 0.
    betas: [0.9, 0.9]
  grad_batches: 1

  lambda_gp: 1

  scheduler:
    type: CosineAnnealingLR
    T_max: 400000
    eta_min: !!float 1e-7

  full_epochs: 60
  warmup_epochs: 60_

  # losses
  pixel_opt:
    type: PSNRLoss
    loss_weight: 1
    reduction: mean

# validation settings
val:
  val_freq: !!float 5e3
  save_img: false
  use_image: false

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false
    ssim:
      type: calculate_ssim
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 200
  save_checkpoint_freq: !!float 5e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500

discriminator:
  d_name: 'double_gan'
  d_layers: 3
  norm_layer: 'instance'
  dropout: True

magic_nums: 

  d_loss: 1 #d_loss = delta*d_loss
  g_loss: 1 #adv_loss = gamma*gan_loss

  #loss = alpha*l_1 + beta*l_vgg + zeta*l_ssim + lambda*l_adv + kappa*l_edgediff + mu*l_backblur + nu*l_foreedge
  l1: 0.5 #L1
  vgg: 0.1 #VGG
  ssim: 0.05 #SSIM
  adv: 1 #Adversarial